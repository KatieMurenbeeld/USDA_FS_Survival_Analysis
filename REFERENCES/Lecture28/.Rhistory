data = train,
method = "glm",
trControl = trainControl("cv", number = 5, classProbs = TRUE, verboseIter = TRUE),
#importance = TRUE,
na.action = "na.omit")
#K Nearest Neighbors
knnMod <- train(left~.,
data = train,
method = "knn",
trControl = trainControl("cv", number = 5, classProbs = TRUE, verboseIter = TRUE),
#importance = TRUE,
na.action = "na.omit")
#Naive Bayes requires klar package
nbMod <- train(left~.,
data = train,
method = "nb",
trControl = trainControl("cv", number = 5, classProbs = TRUE, verboseIter = TRUE),
#importance = TRUE,
na.action = "na.omit")
#Naive Bayes requires klar package
nbMod <- train(left~.,
data = train,
method = "nb",
trControl = trainControl("cv", number = 5, classProbs = TRUE, verboseIter = TRUE),
#importance = TRUE,
na.action = "na.omit")
#Neural Network
nnMod <- train(left~.,
data = train,
method = "nnet",
trControl = trainControl("cv", number = 5, classProbs = TRUE, verboseIter = TRUE),
#importance = TRUE,
na.action = "na.omit")
#Support Vector Machine with Class weights
svmMod <- train(left~.,
data = train,
method = "svmRadialWeights",
trControl = trainControl("cv", number = 5, classProbs = TRUE, verboseIter = TRUE),
#importance = TRUE,
na.action = "na.omit")
#Logistic Regression Model
lbMod <- train(left~.,
data = train,
method = "LogitBoost",
trControl = trainControl("cv", number = 5, verboseIter = TRUE),
na.action = "na.omit")
#Predictions on test data
test2 <- dplyr::select(test, -left)
rfP <- predict(rfMod, test2, type = "raw")
glmP <- predict(glmMod, test2, type = "raw")
knnP <- predict(knnMod, test2, type = "raw")
nbP <- predict(nbMod, test2, type = "raw")
nnP <- predict(nnMod, test2, type = "raw")
svmP <- predict(svmMod, test2, type = "raw")
lbP <- predict(lbMod, test2, type = "raw")
#classProbs must be TRUE in the train control variable
rfProb <- predict(rfMod, test, type = "prob")
glmProb <- predict(glmMod, test2, type = "prob")
knnProb <- predict(knnMod, test2, type = "prob")
nbProb <- predict(nbMod, test2, type = "prob")
nnProb <- predict(nnMod, test2, type = "prob")
svmProb <- predict(svmMod, test2, type = "prob")
lbProb <- predict(lbMod, test2, type = "prob")
glimpse(test)
#calculate variabe importance using the caret varImp() call
varImp(rfMod)
confusionMatrix(rfP,test$left)
confusionMatrix(glmP,test$left)
confusionMatrix(knnP,test$left)
confusionMatrix(nbP,test$left)
confusionMatrix(nnP,test$left)
confusionMatrix(svmP,test$left)
confusionMatrix(lbP,test$left)
#Compare Model Accuracy
modelCompare <- resamples(list(RF=rfMod, GLM=glmMod, KNN=knnMod, NB=nbMod, NN=nnMod, SVM=svmMod, LB=lbMod))
summary(modelCompare)
comparisonTable <- modelCompare$values
View(comparisonTable)
View(comparisonTable)
#add predictions to test file
test$predicted <- rfP
test$probLeft <- rfProb$Left
View(comparisonTable)
View(comparisonTable)
R.version.string
update.packages(ask = FALSE, checkBuilt = TRUE)
View(hrRO)
setwd("~/Desktop/EEB622/Lecture28")
library(survminer)
library(survival)
library(lubridate)
library(dplyr)
## load data:
dat <- read.csv("adoptedpets.csv")
View(dat)
head(dat)
## Data transformation: What are the steps below doing?
dat$dayin <- ymd(as.character(dat$dayin)) ## ymd is part of the lubridate package
dat$dayout <- ymd(as.character(dat$dayout))
str(dat)
dat$daysobserved <- dat$dayout - dat$dayin
head(dat)
str(dat$daysobserved)
survcurve <- survfit(Surv(daysobserved, adopted) ~ 1, data=dat)
survcurve ## data from the survival curve:
library(survminer)
library(survival)
library(lubridate)
library(dplyr)
## load data:
th_dat <- read.csv("ID_TH_20191209_shiny.csv")
head(th_dat)
View(dat)
View(th_dat)
## load data:
th_dat <- read.csv("ID_TH_20200523_survana.csv")
head(th_dat)
View(th_dat)
survcurveTH <- survfit(Surv(TIME_LAG, Completed) ~ 1, data=th_dat)
survcurveTH ## data from the survival curve:
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurveTH, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being completed",
surv.median.line = c('hv'))
.line = c('hv')
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurveTH, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being completed",
surv.median.line = c('hv'))
View(th_dat)
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelTH <-survreg(Surv(TIME_LAG, Completed) ~ ADMIN_FORE, data=th_dat,
dist='exponential')
summary(model)
exp(coef(model))
library(survminer)
library(survival)
library(lubridate)
library(dplyr)
## load data:
th_dat <- read.csv("ID_TH_20200523_survana.csv")
View(th_dat)
head(th_dat)
survcurveTH <- survfit(Surv(TIME_LAG, Completed) ~ 1, data=th_dat)
survcurveTH ## data from the survival curve:
.line = c('hv')
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurveTH, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being completed",
surv.median.line = c('hv'))
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelTH <-survreg(Surv(TIME_LAG, Completed) ~ NEPA, data=th_dat,
dist='exponential')
summary(model)
exp(coef(model))
summary(modelTH)
exp(coef(modelTH))
## load data:
dat <- read.csv("adoptedpets.csv")
View(dat)
min(th_dat$TIME_LAG)
setwd("~/Desktop/Survival_Analysis/Lecture28")
library(survminer)
library(survival)
library(lubridate)
library(dplyr)
## load data:
th_dat <- read.csv("ID_TH_20200523_survana.csv")
pals_dat <- read.csv("/Home/Desktop/Survival_Analysis/USFS_PALS_MYTR_adjusted_3-2019.csv")
pals_dat <- read.csv("/Users/kathrynmurenbeeld//Desktop/Survival_Analysis/USFS_PALS_MYTR_adjusted_3-2019.csv")
survcurveTH <- survfit(Surv(TIME_LAG, Completed) ~ 1, data=th_dat)
survcurveTH ## data from the survival curve:
.line = c('hv')
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurveTH, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being completed",
surv.median.line = c('hv'))
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelTH <-survreg(Surv(TIME_LAG, Completed) ~ NEPA, data=th_dat,
dist='exponential')
library(tidyverse)
View(pals_dat)
View(pals_dat)
pals_reg1 <- filter(pals_dat, REGION_ID==1)
View(pals_reg1)
pals_reg01 <- filter(pals_dat, REGION_ID==1)
View(pals_reg1)
View(pals_reg01)
survcurvREG01 <- survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED) ~ 1, data = pals_reg01)
survcurvREG01 <- survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ 1, data = pals_reg01)
survcurvREG01
ggsurvplot(survcurveREG01, conf.int = TRUE, risk.table = TRUE,
ylab="Elapsed Days Based on Appealed",
surv.median.line = c('hv'))
ggsurvplot(survcurvREG01, conf.int = TRUE, risk.table = TRUE,
ylab="Elapsed Days Based on Appealed",
surv.median.line = c('hv'))
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurveTH, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being completed",
surv.median.line = c('hv'))
ggsurvplot(survcurvREG01, conf.int = TRUE, risk.table = TRUE,
ylab="Elapsed Days Based on Appealed",
surv.median.line = c('hv'))
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelTH <-survreg(Surv(TIME_LAG, Completed) ~ NEPA, data=th_dat,
dist='exponential')
View(pals_reg01)
View(pals_reg01)
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBECTED.) ~ TM.Forest.products...purpose, data=pals_reg01,
dist='exponential')
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose, data=pals_reg01,
dist='exponential')
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose, data=pals_reg01)
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.), data=pals_reg01)
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.), data=pals_reg01)
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose, data=pals_reg01)
help("survreg")
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose,
data=pals_reg01)
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose,
dist = "logistic", data=pals_reg01)
modelTH <-survreg(Surv(TIME_LAG, Completed) ~ NEPA, data=th_dat,
dist='exponential')
summary(modelREG01)
exp(coef(modelREG01))
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose,
dist = "lognormal", data=pals_reg01)
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose,
dist = "gaussian", data=pals_reg01)
summary(modelREG01)
exp(coef(modelREG01))
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose,
dist = "loglogistic", data=pals_reg01)
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose,
dist = "gaussian", data=pals_reg01)
summary(modelREG01)
exp(coef(modelREG01))
## This will generate a survival curve from our data for the comparison we just conducted above,
## between juvenile and adult pets.
ggsurvplot(survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose, data=pals_reg01), conf.int = TRUE,
ylab="Probability of", surv.median.line = c('hv'))
## This will generate a survival curve from our data for the comparison we just conducted above,
## between juvenile and adult pets.
ggsurvplot(survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose, data=pals_reg01), conf.int = TRUE,
ylab="Probability of...", surv.median.line = c('hv'))
ggsurvplot(survcurvREG01, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days"
surv.median.line = c('hv'))
ggsurvplot(survcurvREG01, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
## This will generate a survival curve from our data for the comparison we just conducted above,
## between juvenile and adult pets.
ggsurvplot(survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose, data=pals_reg01), conf.int = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
## We can also plot our model's predictions (which will be curved, rather than stair-stepped, in contrast to the actual survival data):
plot(1, type="n", xlab="time", ylab="probability of...", xlim=c(0, 100), ylim=c(0, 1))
## We can also plot our model's predictions (which will be curved, rather than stair-stepped, in contrast to the actual survival data):
plot(1, type="n", xlab="time", ylab="probability of...", xlim=c(0, 4000), ylim=c(0, 1))
lines(predict(modelREG01, newdata=list(TM.Forest.products...purpose=1),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="blue")
lines(predict(model, newdata=list(TM.Forest.products...purpose=0),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="red")
lines(predict(modelREG01, newdata=list(TM.Forest.products...purpose=0),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="red")
legend(60, 1.0, legend=c("Forest Product Projects", "Non-Forest Product Projects"),
col=c("red", "blue"), lty=1)
## We can also plot our model's predictions (which will be curved, rather than stair-stepped, in contrast to the actual survival data):
plot(1, type="n", xlab="time", ylab="probability of...", xlim=c(0, 4000), ylim=c(0, 1))
lines(predict(modelREG01, newdata=list(TM.Forest.products...purpose=1),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="blue")
lines(predict(modelREG01, newdata=list(TM.Forest.products...purpose=0),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="red")
legend(60, 1.0, legend=c("Non-Forest Product Projects", "Forest Product Projects"),
col=c("red", "blue"), lty=1)
library(survminer)
library(survival)
library(lubridate)
library(dplyr)
library(tidyverse)
## load data:
th_dat <- read.csv("ID_TH_20200523_survana.csv")
pals_dat <- read.csv("/Users/kathrynmurenbeeld//Desktop/Survival_Analysis/USFS_PALS_MYTR_adjusted_3-2019.csv")
pals_reg01 <- filter(pals_dat, REGION_ID==1)
head(th_dat)
survcurveTH <- survfit(Surv(TIME_LAG, Completed) ~ 1, data=th_dat)
survcurvREG01 <- survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ 1, data = pals_reg01)
survcurveTH ## data from the survival curve:
survcurvREG01
.line = c('hv')
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurveTH, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being completed",
surv.median.line = c('hv'))
ggsurvplot(survcurvREG01, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose,
dist = "gaussian", data=pals_reg01)
summary(modelREG01)
exp(coef(modelREG01))
## load data:
dat <- read.csv("adoptedpets.csv")
head(dat)
## Data transformation: What are the steps below doing?
dat$dayin <- ymd(as.character(dat$dayin)) ## ymd is part of the lubridate package
dat$dayout <- ymd(as.character(dat$dayout))
str(dat)
dat$daysobserved <- dat$dayout - dat$dayin
head(dat)
str(dat$daysobserved)
survcurve <- survfit(Surv(daysobserved, adopted) ~ 1, data=dat)
survcurvREG01_2 <- survfit(Surv(ELAPSED.DAYS, PROJECT.STATUS) ~ 1, data = pals_reg01)
survcurvREG01_2
.line = c('hv')
ggsurvplot(survcurvREG01_2, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
modelREG01_2 <- survreg(Surv(ELAPSED.DAYS, PROJECT.STATUS) ~ TM.Forest.products...purpose,
dist = "exponential", data=pals_reg01)
library(survminer)
library(survival)
library(lubridate)
library(dplyr)
library(tidyverse)
## load data:
th_dat <- read.csv("ID_TH_20200523_survana.csv")
pals_dat <- read.csv("/Users/kathrynmurenbeeld//Desktop/Survival_Analysis/USFS_PALS_MYTR_adjusted_3-2019.csv")
pals_reg01 <- filter(pals_dat, REGION_ID==1)
head(th_dat)
head(pals_reg01)
survcurveTH <- survfit(Surv(TIME_LAG, Completed) ~ 1, data=th_dat)
survcurvREG01 <- survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ 1, data = pals_reg01)
survcurvREG01_2 <- survfit(Surv(ELAPSED.DAYS, PROJECT.STATUS) ~ 1, data = pals_reg01)
survcurveTH ## data from the survival curve:
survcurvREG01
survcurvREG01_2
.line = c('hv')
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurveTH, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being completed",
surv.median.line = c('hv'))
ggsurvplot(survcurvREG01, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
ggsurvplot(survcurvREG01_2, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose,
dist = "gaussian", data=pals_reg01)
modelREG01_2 <- survreg(Surv(ELAPSED.DAYS, PROJECT.STATUS) ~ TM.Forest.products...purpose,
dist = "exponential", data=pals_reg01)
## This will generate a survival curve from our data for the comparison we just conducted above,
## between juvenile and adult pets.
ggsurvplot(survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose, data=pals_reg01), conf.int = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
## We can also plot our model's predictions (which will be curved, rather than stair-stepped, in contrast to the actual survival data):
plot(1, type="n", xlab="time", ylab="probability of...", xlim=c(0, 4000), ylim=c(0, 1))
lines(predict(modelREG01, newdata=list(TM.Forest.products...purpose=1),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="blue")
lines(predict(modelREG01, newdata=list(TM.Forest.products...purpose=0),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="red")
legend(60, 1.0, legend=c("Non-Forest Product Projects", "Forest Product Projects"),
col=c("red", "blue"), lty=1)
library(survminer)
library(survival)
library(lubridate)
library(dplyr)
## load data:
dat <- read.csv("adoptedpets.csv")
head(dat)
## Data transformation: What are the steps below doing?
dat$dayin <- ymd(as.character(dat$dayin)) ## ymd is part of the lubridate package
dat$dayout <- ymd(as.character(dat$dayout))
str(dat)
dat$daysobserved <- dat$dayout - dat$dayin
head(dat)
str(dat$daysobserved)
survcurve <- survfit(Surv(daysobserved, adopted) ~ 1, data=dat)
survcurve ## data from the survival curve:
.line = c('hv')
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurve, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being adopted",
surv.median.line = c('hv'))
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
model <-survreg(Surv(daysobserved, adopted) ~ adult, data=dat,
dist='exponential')
summary(model)
exp(coef(model))
## This will generate a survival curve from our data for the comparison we just conducted above, between juvenile and adult pets.
ggsurvplot(survfit(Surv(daysobserved, adopted) ~ adult, data=dat), conf.int = TRUE, ylab="Probability of not being adopted", surv.median.line = c('hv'))
## We can also plot our model's predictions (which will be curved, rather than stair-stepped, in contrast to the actual survival data):
plot(1, type="n", xlab="time", ylab="probability of not being adopted", xlim=c(0, 100), ylim=c(0, 1))
lines(predict(model, newdata=list(adult=1),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="blue")
lines(predict(model, newdata=list(adult=0),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="red")
legend(60, 1.0, legend=c("Juvenile", "Adult"),
col=c("red", "blue"), lty=1)
modcat <-survreg(Surv(daysobserved, adopted) ~ dog, data=dat,
dist='exponential')
exp(coef(modcat))
ggsurvplot(survfit(Surv(daysobserved, adopted) ~ dog, data=dat), conf.int = TRUE, ylab="Probability of not being adopted", surv.median.line = c('hv'))
plot(1, type="n", xlab="time", ylab="probability of not being adopted", xlim=c(0, 100), ylim=c(0, 1))
survcurve <- survfit(Surv(daysobserved, adopted) ~ 1, data=dat)
survcurve ## data from the survival curve:
.line = c('hv')
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurve, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being adopted",
surv.median.line = c('hv'))
ggsurvplot(survcurvREG01_2, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
survcurvREG01_2 <- survfit(Surv(ELAPSED.DAYS, PROJECT.STATUS) ~ 1, data = pals_reg01)
View(modelREG01)
View(pals_reg01)
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurveTH, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being completed",
surv.median.line = c('hv'))
ggsurvplot(survcurvREG01, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being appealed or objected?",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
View(dat)
library(survminer)
library(survival)
library(lubridate)
library(dplyr)
library(tidyverse)
## load data:
th_dat <- read.csv("ID_TH_20200523_survana.csv")
pals_dat <- read.csv("/Users/kathrynmurenbeeld//Desktop/Survival_Analysis/USFS_PALS_MYTR_adjusted_3-2019.csv")
pals_reg01 <- filter(pals_dat, REGION_ID==1)
head(th_dat)
head(pals_reg01)
survcurveTH <- survfit(Surv(TIME_LAG, Completed) ~ 1, data=th_dat)
survcurvREG01 <- survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ 1, data = pals_reg01)
survcurvREG01_2 <- survfit(Surv(ELAPSED.DAYS, PROJECT.STATUS) ~ 1, data = pals_reg01)
survcurveTH ## data from the survival curve:
survcurvREG01
survcurvREG01_2
.line = c('hv')
## Be sure to make your plot panel a bit bigger to accomodate this plot:
ggsurvplot(survcurveTH, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being completed",
surv.median.line = c('hv'))
ggsurvplot(survcurvREG01, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of not being appealed or objected?",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
ggsurvplot(survcurvREG01_2, conf.int = TRUE, risk.table = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
### Use an exponential regression to assess differences in adoption between puppies/kittens and adults. Survreg is a function from the "survival" package.
modelREG01 <- survreg(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose,
dist = "gaussian", data=pals_reg01)
modelREG01_2 <- survreg(Surv(ELAPSED.DAYS, PROJECT.STATUS) ~ TM.Forest.products...purpose,
dist = "exponential", data=pals_reg01)
summary(modelREG01)
exp(coef(modelREG01))
## This will generate a survival curve from our data for the comparison we just conducted above,
## between juvenile and adult pets.
ggsurvplot(survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose, data=pals_reg01), conf.int = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
## We can also plot our model's predictions (which will be curved, rather than stair-stepped, in contrast to the actual survival data):
plot(1, type="n", xlab="time", ylab="probability of...", xlim=c(0, 4000), ylim=c(0, 1))
lines(predict(modelREG01, newdata=list(TM.Forest.products...purpose=1),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="blue")
lines(predict(modelREG01, newdata=list(TM.Forest.products...purpose=0),type="quantile",
p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="red")
legend(60, 1.0, legend=c("Non-Forest Product Projects", "Forest Product Projects"),
col=c("red", "blue"), lty=1)
ggsurvplot(survfit(Surv(ELAPSED.DAYS, APPEALED.OR.OBJECTED.) ~ TM.Forest.products...purpose, data=pals_reg01), conf.int = TRUE,
ylab="Probability of...",
xlab="Time, elapsed days",
surv.median.line = c('hv'))
modelTH <-survreg(Surv(TIME_LAG, Completed) ~ NEPA, data=th_dat,
dist='exponential')
summary(modelTH)
exp(coef(modelTH))
